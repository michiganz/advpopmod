# 06 October 2015
# Gavin Fay
##############################
# Univariate Exponential growth model, simulation
set.seed(2345)
lamda = 1.05
gamma = 1.0
tau = 2
sigma = 4
n0 = 10
n1 = rep(NA,31)
#initial conditions
n1[1] = n0
#deterministic exponential model
for (i in 2:31)
n1[i] = lamda*n1[i-1]
#now add process error
n2 <- n1
for (i in 2:31)
n2[i] = lamda*n2[i-1] + rnorm(1,0,tau)  #normal random variable with mean 0 and std dev tau
#observations
y <- gamma*n2[-1] + rnorm(length(n2)-1,0,sigma)
#plot
plot(0:30,n1,type='b',lwd=3,xlab="time",ylab="States and Observations",
ylim=c(0,30),xaxs="i",xlim=c(0,30),col="white")
lines(0:30,n2,lwd=3,col="darkblue")
points(1:30,y,lwd=2,pch=16,cex=1.2,col="maroon")
# Estimation of states using the Kalman filter
#
# Uses modified Chapter 4 R Code for
# Kalman Filter, (Negative log) Likelihood, and MLE code
# for NDLM with 2 component state and obs'n vectors
# (See Table 4.1 and Section 4.4.1)
setwd('~/classes/advpopmod/labs/lab6/')
install.packages('mvtnorm')
library(mvtnorm)
#read in the R code contained in kf_functions.r
source("kf_functions.r")
#set up the matrices for the Kalman filter
A=matrix(lamda,nrow=1,ncol=1)
Q=matrix(tau^2,nrow=1,ncol=1)
B=matrix(gamma,nrow=1,ncol=1)
R=matrix(sigma^2,nrow=1,ncol=1)
#Put the observations in matrix form
obs <- matrix(c(-1,y),nrow=1,ncol=1+length(y))
#Run the Kalman filter given the known parameters
out <- kf(obs,A,B,Q,R,n0)
#Show the filtered state estimates
print(out$filter.n)
plot(0:30,n1,type='b',lwd=3,xlab="time",ylab="States and Observations",
ylim=c(0,30),xaxs="i",xlim=c(0,30),col="white")
lines(0:30,n2,lwd=3,col="darkblue")
points(1:30,y,lwd=2,pch=16,cex=1.2,col="maroon")
lines(0:30,out$filter.n,lwd=3,col="darkgreen")
#out also contains the predicted n's, the predicted covariance matrix,
#and the filtered covariance estimates
#> str(out)
#List of 4
#$ filter.n        : num [1, 1:21] 10 11.3 11.4 11.8 13.9 ...
#$ pred.n.matrix   : num [1, 1:21] 10 10.5 11.9 12 12.4 ...
#$ cov.pred.array  : num [1, 1, 1:21] 0 4 7.53 9.64 10.63 ...
#$ cov.filter.array: num [1, 1, 1:21] 0 3.2 5.12 6.02 6.39 ...
#-- testing log likelihood function
param.vals <- as.vector(c(n0,lamda,tau,sigma))
nll <- like.fn.2state.SSM(param.vals,obs=obs,gamma=gamma)
print(nll)
param.vals.alt1 <- as.vector(c(10,1.01,3,3))
like.fn.2state.SSM(param.vals.alt1,obs=obs,gamma=gamma)
mle <- optim(param.vals.alt1,,fn=like.fn.2state.SSM,
obs=obs,gamma=gamma)
print(mle)
###### Schnute's lingcod
nobs <- scan('lingcod.dat',n=1,skip=2)
ling.data <- scan('lingcod.dat',n=nobs,skip=8)
y
ling.data
y <- ling.data
A=matrix(lamda,nrow=1,ncol=1)
Q=matrix(tau^2,nrow=1,ncol=1)
B=matrix(gamma,nrow=1,ncol=1)
R=matrix(sigma^2,nrow=1,ncol=1)
#Put the observations in matrix form
obs <- matrix(c(-1,y),nrow=1,ncol=1+length(y))
param.vals.alt1 <- as.vector(c(300,1.01,3,3))
like.fn.2state.SSM(param.vals.alt1,obs=obs,gamma=gamma)
mle <- optim(param.vals.alt1,,fn=like.fn.2state.SSM,
obs=obs,gamma=gamma)
mle
mle$par
